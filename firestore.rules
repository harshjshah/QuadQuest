// Firestore rules - public puzzle content is readable, secret answers are not.
// Secrets stored under rooms/{roomId}/secrets/{puzzleId}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rooms readable
    match /rooms/{roomId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Only host or service account (admin) can update room
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.hostId
      );
    }

    // puzzles: public fields only (body, options, type, basePoints, maxTime)
    match /rooms/{roomId}/puzzles/{puzzleId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId;
      allow update, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId;
    }

    // secrets: only writes allowed by functions/hosts, no client reads/writes
    match /rooms/{roomId}/secrets/{puzzleId} {
      allow read: if false;
      allow write: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId;
    }

    // submissions: users can create/update their own attempts but cannot write score fields
    match /rooms/{roomId}/submissions/{uid} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == uid;
      allow update: if request.auth != null && request.auth.uid == uid
        && !(request.resource.data.keys().hasAny(['totalScore','p1','p2','p3','p4']));
    }
  }
}
